@page "/"
@layout HomeLayout
@inject IStoreService Store
<div id="carouselDiv" class="row p-0 m-0">
    <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">
            <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
            <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
        </ol>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img class="d-block w-100" src="images/slide1.jpg" alt="First slide">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" src="images/slide2.png" alt="Second slide">
            </div>
        </div>
        <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
</div>
@*search bar*@
<div class="bg-light p-3 col-12">
    <div class="ml-4 row">
        <select @bind="@selectedFilter" class="btn btn-primary col-2">
            <option value="store">Store</option>
            <option value="category">Category</option>
            <option value="product">Product</option>
        </select>
        <input @bind-value="SearchTerm" @bind-value:event="oninput" @onkeyup="@searchResults"  class="form-control col-7 shadow-none border-dark ml-2 mr-2" />
        <a class="btn btn-primary oi oi-magnifying-glass text-light col-2"></a>
    </div>
</div>

<div class="row m-0">
    <div class="card bg-light col-2 m-2 p-2 filterDiv" style="left:1% ">
        <h4>Filters</h4>
        <hr />
        <h5>Location</h5>
        <div class="form-check ml-2">
            @if (AllStores != null && AllStores.Any())
            {
                @foreach (var store in AllStores)
                {
                    @if (!countries.Contains(store.Country))
                    {
                        countries.Add(store.Country);
                    }
                }
            }
            @foreach (var country in countries)
                {
                    <input class="form-check-input" type="checkbox" @onchange="@(async (e) => await CheckboxClicked(country, e.Value))">
                    <label class="form-check-label" for="flexCheckDefault">
                        @country
                    </label>
                     <br />    
                }
               
        </div>
        <hr />
        <h5>Price</h5>
        <div class="ml-2 row">
            <input type="number" class="col-5 p-0 mr-1" @bind-value="min" />
            <input type="number" class="col-5 p-0" @bind-value="max" />
        </div>
        <div>
            <br />
            <div class="ml-2">
            <button class="col-5 mr-1 btn btn-primary" type="submit" @onclick="findStoresByPrice">Search</button>
            <button class="col-5 btn btn-success" type="submit" @onclick="ResetStores">Reset</button>
            </div>
        </div>
      

    </div>

    <div class="form-inline justify-content-center mt-4 col-9">
        @if (Stores == null)
        {
        <div style="top:50%;left:53%;margin-top:-50px;margin-left:-100px;">
            <img src="Images/loader.gif" />
        </div> 
            }
        else if (Stores != null && Stores.Any())
        {
            @foreach (var store in FilteredStores)
            {
                int imageIndex = 0;
                int dataSlideTag = 0;
                <div class="card storeCard col-lg-3 col-md-5 col-11 m-3 p-0 shadow" style="text-decoration:none;">
                    <div id="carouselDiv" class="row p-0 m-0">
                        <div id="@caresoltag" class="carousel slide" data-ride="carousel" data-interval="4000">
                            <ol class="carousel-indicators">
                                @foreach (var image in store.StoreImages )
                                {
                                    @if (imageIndex == 0)
                                    {
                                        <li data-target="#carouselExampleIndicators" data-slide-to="@dataSlideTag" class="active"></li>
                                    }
                                    else
                                    {
                                        <li data-target="#carouselExampleIndicators" data-slide-to="@dataSlideTag"></li>
                                    }
                                    dataSlideTag++;
                                 }
                            </ol>
                        <div class="carousel-inner col-12 min-vh-30 p-0" style="width:100%; height:150px; !important">
                            @foreach (var image in store.StoreImages )
                             {
                                @if (imageIndex == 0)
                                 {
                                    <div class="carousel-item active">
                                        <img class="card-img-top" src="@image.StoreImageUrl" onerror="this.src = '/Images/store.jpg';" alt="Product image cap" />
                                    </div> 
                                 }
                                 else
                                 {
                                    <div class="carousel-item">
                                        <img class="card-img-top" src="@image.StoreImageUrl" onerror="this.src = '/Images/store.jpg';" alt="Product image cap" />
                                    </div>
                                 }
                                 imageIndex++;
                             }
                @{imageIndex = 0;}

                @if (store.StoreImages.Count==0)
                {
                    <div class="carousel-item active">
                        <img class="card-img-top" src="/Images/store.jpg" onerror="this.src = '/Images/store.jpg';" alt="Product image cap" />
                    </div>
                }

            </div>
            <a class="carousel-control-prev" href="#@caresoltag" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#@caresoltag" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>

    <a href="@($"stores/store/{store.Id}")"  style="text-decoration:none;">
        <div>
            <div class="card-body pt-0 pb-0 pl-2">
                <h5 class="card-title text-dark m-0">@store.Name</h5>
            </div>
            <div class="card-footer pt-0 pb-0 pl-2">
                <p class="card-text m-0"><small class="text-muted">@store.Type</small></p>
            </div>
        </div>
    </a>
    @{caresoltag++;}
</div>} 
        }
        else
        {
            <h2>Curruntly no store is available :)</h2>
        }
    </div>
</div>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

@code

{
    public int caresoltag = 0;
    public string selectedFilter = "store";
    public string SearchTerm { get; set; } = "";
    public IEnumerable<StoreDTO> FilteredStores { get; set; }
    public IEnumerable<StoreDTO> Stores { get; set; }
    public IEnumerable<StoreDTO> AllStores { get; set; }
    public IEnumerable<StoreDTO> test { get; set; }
    public List<string> countries = new List<string>();
    int min = 0;
    int max = 10000;

    public List<string> selectedCountries = new List<string>();
    protected override async Task OnInitializedAsync()
    {
        Stores = await Store.getAllStores();
        AllStores = await Store.getAllStores();
        FilteredStores = Stores;
    }
    public async Task searchByRange()
    {
        Stores = await Store.SearchStoreByProductPrice(min, max);
    }

    public async Task CheckboxClicked(string countryID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!selectedCountries.Contains(countryID))
            {
                selectedCountries.Add(countryID);
            }
        }
        else
        {
            if (selectedCountries.Contains(countryID))
            {
                selectedCountries.Remove(countryID);
            }
        }
        if (!selectedCountries.Any())
        {
            await ResetStores();
        }
        else
        {
            if (selectedCountries != null && selectedCountries.Any())
            {
                FilteredStores = AllStores.Where(i => i.Country.ToLower().Contains(selectedCountries[0].ToLower())).ToList();
                int count = 1;
                foreach (var country in selectedCountries)
                {
                    if (count != 1)
                    {
                        test = await Store.SearchStoreByCountry(country);
                        FilteredStores = Stores.Union(test);
                    }
                    count++;
                }
            }
        }
    }
    public async Task findStoresByPrice()
    {
        Stores = await Store.SearchStoreByProductPrice(min, max);
        FilteredStores = Stores;
    }
    public async Task ResetStores()
    {
        min = 0;
        max = 10000;
        Stores = await Store.getAllStores();
        FilteredStores = Stores;

    }
    public async Task searchResults()
    {
        if (selectedFilter == "store")
        {
            if (SearchTerm == "")
            {
                FilteredStores = Stores;
            }
            else
            {
                FilteredStores = Stores.Where(i => i.Name.ToLower().Contains(SearchTerm.ToLower())).ToList();
            }
        }
        else if (selectedFilter == "product")
        {
            if (SearchTerm == "")
            {
                FilteredStores = Stores;
            }
            else
            {
                FilteredStores = await Store.SearchStoreByProductName(SearchTerm);
            }
        }
        else if (selectedFilter == "category")
        {
            if (SearchTerm == "")
            {
                FilteredStores = Stores;
            }
            else
            {
                FilteredStores = await Store.SearchStoreByCategory(SearchTerm);
            }
        }
    }
}